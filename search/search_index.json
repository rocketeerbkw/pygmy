{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The pygmy stack is a container stack for local development, and pygmy is the main tool. It's built to work with: Docker Desktop for Mac Docker Desktop for Windows Docker Engine for Linux Quite a lot for such a small whale \ud83d\udc33) What pygmy will handle for you: Starting the necessary Docker Containers for local development If on Linux: Adds nameserver 127.0.0.1 to your /etc/resolv.conf file, so that your local Linux can resolve *.docker.amazee.io via the dnsmasq container If on Mac with Docker for Mac: Creates the file /etc/resolver/docker.amazee.io which tells OS X to forward DNS requests for *.docker.amazee.io to the dnsmasq container Tries to add the ssh key in ~/.ssh/id_rsa to the ssh-agent container (no worries if that is the wrong key, you can add more any time) Starts a local mail Mail Transfer Agent (MTA) in order to test and view mails","title":"Pygmy"},{"location":"connect_to_mysql_from_external/","text":"Warning This section is outdated and needs an update Connect to MySQL in Docker Container # If you like to connect to the MySQL Database inside the Docker container with an external Tool like Sequel Pro , MySQL Workbench , HeidiSQL , DBeaver , just plain old mysql cli or anything else. Get published mysql port from container # Docker assigns a randomly published port for MySQL during each container start. This is done to prevent port collisions. To get the published port via docker : $ docker port changeme.net.docker.amazee.io 3306/tcp -> 0.0.0.0:32797 Or via docker-compose inside a Drupal repository $ docker-compose port drupal 3306 0.0.0.0:32797 linux Get ip from container # If you are on Linux and run docker native, you also need to get the IP of the container $ docker inspect --format '{{ .NetworkSettings.IPAddress }}' changeme.net.docker.amazee.io 172.17.0.4 Connect to MySQL # Linux OS X IP/Host IP from container docker.amazee.io Port published port from container published port from container Username drupal drupal Password drupal drupal Database drupal drupal Example Sequel PRO #","title":"Connecting to MySQL externally"},{"location":"connect_to_mysql_from_external/#connect-to-mysql-in-docker-container","text":"If you like to connect to the MySQL Database inside the Docker container with an external Tool like Sequel Pro , MySQL Workbench , HeidiSQL , DBeaver , just plain old mysql cli or anything else.","title":"Connect to MySQL in Docker Container"},{"location":"connect_to_mysql_from_external/#get-published-mysql-port-from-container","text":"Docker assigns a randomly published port for MySQL during each container start. This is done to prevent port collisions. To get the published port via docker : $ docker port changeme.net.docker.amazee.io 3306/tcp -> 0.0.0.0:32797 Or via docker-compose inside a Drupal repository $ docker-compose port drupal 3306 0.0.0.0:32797","title":"Get published mysql port from container"},{"location":"connect_to_mysql_from_external/#linux-get-ip-from-container","text":"If you are on Linux and run docker native, you also need to get the IP of the container $ docker inspect --format '{{ .NetworkSettings.IPAddress }}' changeme.net.docker.amazee.io 172.17.0.4","title":"linux Get ip from container"},{"location":"connect_to_mysql_from_external/#connect-to-mysql","text":"Linux OS X IP/Host IP from container docker.amazee.io Port published port from container published port from container Username drupal drupal Password drupal drupal Database drupal drupal","title":"Connect to MySQL"},{"location":"connect_to_mysql_from_external/#example-sequel-pro","text":"","title":"Example Sequel PRO"},{"location":"drupal_site_containers/","text":"Warning This section is outdated and needs an update Drupal Docker Containers # During Part I we just started the shared Docker containers. For each Drupal Site we need an own Docker Container: Prerequisites # Docker Compose On OS X just run brew install docker-compose On Linux use your favorite package manager or https://docs.docker.com/compose/install/ Find the right docker-compose.yml # Visit https://github.com/uselagoon/lagoon-examples or clone https://github.com/lagoon-examples/drupal9-base.git into a folder on your computer Copy the desired example file into your Drupal directory (see descriptions below). Use example-docker-compose-drupal.yml if unsure. Rename the file to docker-compose.yml Edit the file according to your needs, change at least the host name. BTW: It's perfectly fine to commit this file into your git repository, so others that are also using docker can use it as well. Run in the same directory as the docker-compose.yml : docker-compose up -d If you are on Windows add the URL to the Hosts file (see windows documentation for that). Open your browser with the entered URL in the docker-compose.yml , happy Drupaling! Connect to the container # To run commands like git or other things within the container, you need to connect to the container. There are two ways for that: Connect via docker-compose (easier) # This is the easier way, you need to be in the same folder where also the docker-compose.yml for that to work: docker-compose exec --user drupal drupal bash Connect via docker # If you want to connect to a container wherever you are right now with your bash: docker exec -itu drupal example.com.docker.amazee.io bash Replace example.com.docker.amazee.io with the docker container you want to connect to Drush from your host machine # To use Drush, you can either connect to the container as above, or add a bash function that will connect for you to run your Drush command. To add the function, add this to your .bashrc file: Bash: function ddrush() { args=\"\" while [ \"$1\" != \"\" ]; do args=\"${args} '$1'\" && shift done; docker-compose exec --user drupal drupal bash -c \"source ~/.bash_envvars && cd \\\"$AMAZEEIO_WEBROOT\\\" && PATH=`pwd`/../vendor/bin:\\$PATH && drush ${args}\" } Fish Shell - ( fishshell.com ): function ddrush --description 'Drush fish (friendly interactive shell) function that detects Amazee.io Docker container. ' if test -f (git rev-parse --show-toplevel)/.amazeeio.yml echo \"Using Amazee.io Docker Container Drush\" command docker-compose exec --user drupal drupal bash -c \"source ~/.bash_envvars && cd \\\"$AMAZEEIO_WEBROOT\\\" && PATH=`pwd`/../vendor/bin:\\$PATH && drush $argv\" else command drush $argv end end funcsave drush When you next start a bash session, you'll be able to use ddrush just like your normal drush command. Update Images # We constantly make improvements, updates and some other nice things to our container images. Visit the Lagoon Image releases page to see if there is something new. If you need to update the Docker Images to the newest version from the Docker Hub run in the same folder as the docker-compose.yml : docker-compose pull docker-compose up -d Slow Updates? # When pulling a new docker image, the download can get stuck. There is a nice workaround for that: pull a second time :) Just open another terminal window at the exact same directory than you run the first docker-compose pull and just run that command again. The download will be unstuck and continue again. If the download is stuck again, cancel the second command with CTRL+c, and run it again (no worries, the first one will continue to run). Repeat that until the download is completely done. docker-compose.yml example files # Visit https://github.com/uselagoon/lagoon-examples to see a range of example projects that you can clone as a starting point","title":"Drupal Site Containers"},{"location":"drupal_site_containers/#drupal-docker-containers","text":"During Part I we just started the shared Docker containers. For each Drupal Site we need an own Docker Container:","title":"Drupal Docker Containers"},{"location":"drupal_site_containers/#prerequisites","text":"Docker Compose On OS X just run brew install docker-compose On Linux use your favorite package manager or https://docs.docker.com/compose/install/","title":"Prerequisites"},{"location":"drupal_site_containers/#find-the-right-docker-composeyml","text":"Visit https://github.com/uselagoon/lagoon-examples or clone https://github.com/lagoon-examples/drupal9-base.git into a folder on your computer Copy the desired example file into your Drupal directory (see descriptions below). Use example-docker-compose-drupal.yml if unsure. Rename the file to docker-compose.yml Edit the file according to your needs, change at least the host name. BTW: It's perfectly fine to commit this file into your git repository, so others that are also using docker can use it as well. Run in the same directory as the docker-compose.yml : docker-compose up -d If you are on Windows add the URL to the Hosts file (see windows documentation for that). Open your browser with the entered URL in the docker-compose.yml , happy Drupaling!","title":"Find the right docker-compose.yml"},{"location":"drupal_site_containers/#connect-to-the-container","text":"To run commands like git or other things within the container, you need to connect to the container. There are two ways for that:","title":"Connect to the container"},{"location":"drupal_site_containers/#connect-via-docker-compose-easier","text":"This is the easier way, you need to be in the same folder where also the docker-compose.yml for that to work: docker-compose exec --user drupal drupal bash","title":"Connect via docker-compose (easier)"},{"location":"drupal_site_containers/#connect-via-docker","text":"If you want to connect to a container wherever you are right now with your bash: docker exec -itu drupal example.com.docker.amazee.io bash Replace example.com.docker.amazee.io with the docker container you want to connect to","title":"Connect via docker"},{"location":"drupal_site_containers/#drush-from-your-host-machine","text":"To use Drush, you can either connect to the container as above, or add a bash function that will connect for you to run your Drush command. To add the function, add this to your .bashrc file: Bash: function ddrush() { args=\"\" while [ \"$1\" != \"\" ]; do args=\"${args} '$1'\" && shift done; docker-compose exec --user drupal drupal bash -c \"source ~/.bash_envvars && cd \\\"$AMAZEEIO_WEBROOT\\\" && PATH=`pwd`/../vendor/bin:\\$PATH && drush ${args}\" } Fish Shell - ( fishshell.com ): function ddrush --description 'Drush fish (friendly interactive shell) function that detects Amazee.io Docker container. ' if test -f (git rev-parse --show-toplevel)/.amazeeio.yml echo \"Using Amazee.io Docker Container Drush\" command docker-compose exec --user drupal drupal bash -c \"source ~/.bash_envvars && cd \\\"$AMAZEEIO_WEBROOT\\\" && PATH=`pwd`/../vendor/bin:\\$PATH && drush $argv\" else command drush $argv end end funcsave drush When you next start a bash session, you'll be able to use ddrush just like your normal drush command.","title":"Drush from your host machine"},{"location":"drupal_site_containers/#update-images","text":"We constantly make improvements, updates and some other nice things to our container images. Visit the Lagoon Image releases page to see if there is something new. If you need to update the Docker Images to the newest version from the Docker Hub run in the same folder as the docker-compose.yml : docker-compose pull docker-compose up -d","title":"Update Images"},{"location":"drupal_site_containers/#slow-updates","text":"When pulling a new docker image, the download can get stuck. There is a nice workaround for that: pull a second time :) Just open another terminal window at the exact same directory than you run the first docker-compose pull and just run that command again. The download will be unstuck and continue again. If the download is stuck again, cancel the second command with CTRL+c, and run it again (no worries, the first one will continue to run). Repeat that until the download is completely done.","title":"Slow Updates?"},{"location":"drupal_site_containers/#docker-composeyml-example-files","text":"Visit https://github.com/uselagoon/lagoon-examples to see a range of example projects that you can clone as a starting point","title":"docker-compose.yml example files"},{"location":"installation/","text":"Installation of Pygmy # Prerequisites # Make sure you have the following dependencies installed: Docker, see the official guides on how to install docker on your system. Go (optional), see the official guides Installation # Installing from homebrew (recommended for most users) # Works for : Linux & MacOS brew tap pygmystack/pygmy ; brew install pygmy ; Installing from a precompiled binary # Releases on GitHub accompany binaries available for download . To install it, put the binary into your system's $PATH environment variable and make it executable. The following is an example of how you would do this, note the URL and location may change depending on your needs. $ wget https://github.com/pygmystack/pygmy/releases/download/v0.1.0/pygmy-go-darwin $ mv ./pygmy-go-darwin /usr/local/bin/pygmy $ chmod u+x /usr/local/bin/pygmy Build from source # Pygmy comes with a Make file, which you can simply run make build && make clean to build binaries for Linux (amd64), Windows (x86) & MacOS (Darwin). From here you can follow the guidance to install the relevant executable in the builds/ folder usign the instructions above. Installing from source # The installation of pygmy is fairly simple and can be accomplished via the go toolchain $ go get github.com/pygmystack/pygmy","title":"Installation"},{"location":"installation/#installation-of-pygmy","text":"","title":"Installation of Pygmy"},{"location":"installation/#prerequisites","text":"Make sure you have the following dependencies installed: Docker, see the official guides on how to install docker on your system. Go (optional), see the official guides","title":"Prerequisites"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#installing-from-homebrew-recommended-for-most-users","text":"Works for : Linux & MacOS brew tap pygmystack/pygmy ; brew install pygmy ;","title":"Installing from homebrew (recommended for most users)"},{"location":"installation/#installing-from-a-precompiled-binary","text":"Releases on GitHub accompany binaries available for download . To install it, put the binary into your system's $PATH environment variable and make it executable. The following is an example of how you would do this, note the URL and location may change depending on your needs. $ wget https://github.com/pygmystack/pygmy/releases/download/v0.1.0/pygmy-go-darwin $ mv ./pygmy-go-darwin /usr/local/bin/pygmy $ chmod u+x /usr/local/bin/pygmy","title":"Installing from a precompiled binary"},{"location":"installation/#build-from-source","text":"Pygmy comes with a Make file, which you can simply run make build && make clean to build binaries for Linux (amd64), Windows (x86) & MacOS (Darwin). From here you can follow the guidance to install the relevant executable in the builds/ folder usign the instructions above.","title":"Build from source"},{"location":"installation/#installing-from-source","text":"The installation of pygmy is fairly simple and can be accomplished via the go toolchain $ go get github.com/pygmystack/pygmy","title":"Installing from source"},{"location":"local_docker_development/","text":"Warning This section is outdated and needs an update Local Drupal Docker Development # Lagoon supports development workflows which involve local development sites. We provide a Drupal Docker development environment that runs on your local computer. It uses the exact same configuration for all services like on the Lagoon servers. This means: If the site runs locally, it also runs on production You can use the exact same settings.php file for local and production And the best: You don't need to have a Lagoon account or site running in order to use the local development environment! Just install it, and experience all the benefits of Lagoon for free. The Docker based Drupal Development environment consists of two parts: Part I: Shared Docker Containers # The shared docker containers for HAProxy and the SSH Agent, these are used by all other containers in order to properly work. They are started with pygmy for Linux & OS X. Part II: Drupal Docker Containers # The Docker Containers which will run Drupal. These are made to be copied into a Drupal root directory and to be started from there with docker-compose . Read how they are used What it includes # An example local Docker Drupal Development environment, such as https://www.github.com/lagoon-examples/drupal9-solr, equips you with all the tools you need to develop your Drupal site locally: Webserver: Nginx Frontend Caching: Varnish FastCGI Process Manager: PHP-FPM Server-side Scripting Language: PHP Database: MariaDB Search: Apache Solr Dependency Manager for PHP: Composer NodeJS / NPM For more information about software components used in the Lagoon Stack head over to their docs . How this works # Docker is super awesome and the perfect tool for local development. There are some hurdles though (no worries, we have a solution for all of them): Exposed ports # If multiple Docker containers are exposing the same port it assigned a random port to the exposed port. In our case, this would mean, that each Drupal Container which would like to listen on Port 80 would get a random port like 34564 assigned. As they are random assigned it would be a lot of hassle of figuring out which port that the Drupal is found, additionally, Drupal doesn't like to run on another Port then 80 or 443 so much. SSH Keys # It is possible to add mount ssh private keys into Docker containers, but this is again cumbersome, especially when you have a passphrase protected key (as you should!). You would need to enter the passphrase for each container that you start. Not a lot of fun. The Solution # pygmy allows you to: Access all sites via the Port 80 or 443 with just different URLs like site1.docker.amazee.io and site2.docker.amazee.io Add your SSH Key once to the system and can forget about it, no need to add it to each container The environment starts 4 containers: andyshinn/dnsmasq Docker container which will listen on port 53 and resolve all DNS requests from *.docker.amazee.io to 127.0.0.1 (so basically a better way then filling your /etc/hosts file by hand) amazeeio/haproxy Docker container which will listen on port 80 and 443. It additionally listens to the Docker socket, realize when you start a new Drupal Container and adapt fully automatically it's haproxy configuration (thanks to the awesome tool docker-gen ). It forwards HTTP and HTTPs requests to the correct Drupal Container. With that we can access all Drupal Containers via a single Port. amazeeio/ssh-agent Docker container which will keeps an ssh-agent at hand for the other Drupal Containers. With that the Drupal Containers do not need to handle ssh-agenting themselves mailhog/mailhog Docker container which will keeps emails from being sent but allows for you to read and debug message contents. Schema for Linux (native Docker) # +--------------------------------------------------------------------+ |Docker | | | | HAProxy knows which | | *.docker.amazee.io is | | handled by which container +---------------------+ | | | | | | +-------+ Drupal Container 1 <--+ | | | | | | | +--------------------+ | +------------------+ | +---------------------+ | | | | | | | | | | | | | | HAProxy +-----+ | | | +----------------------------> | | +---------------------+ | | | | | | Published Ports | | | | | | | | any HTTP/HTTPS | | 80/443 | +-------+ Drupal Container 2 <--+ | | | request | +------------------+ | | | | | Browser | | +---------------------+ | | | | | | | | | | +------------------+ | | | +----------------------------> | | | | <----------------------------+ dns masq | | | | | | | | | | | | Resolves | | | | | | | *.docker.amaze.io | | | | | +--------------------+ to IP of Haproxy | +------------------+ | | | | | | | | | | | | | | | | | +--------------------+ | +------------------+ | | | | | | | | | | pygmy +----------------------------> ssh agent +--------------------------------------+ | | | | | | | +--------------------+ injects ssh-key | +------------------+ Exposes ssh-agent via | into agent | /tmp/amazeeio_ssh-agent/socket | | | +--------------------------------------------------------------------+","title":"Local Docker Development"},{"location":"local_docker_development/#local-drupal-docker-development","text":"Lagoon supports development workflows which involve local development sites. We provide a Drupal Docker development environment that runs on your local computer. It uses the exact same configuration for all services like on the Lagoon servers. This means: If the site runs locally, it also runs on production You can use the exact same settings.php file for local and production And the best: You don't need to have a Lagoon account or site running in order to use the local development environment! Just install it, and experience all the benefits of Lagoon for free. The Docker based Drupal Development environment consists of two parts:","title":"Local Drupal Docker Development"},{"location":"local_docker_development/#part-i-shared-docker-containers","text":"The shared docker containers for HAProxy and the SSH Agent, these are used by all other containers in order to properly work. They are started with pygmy for Linux & OS X.","title":"Part I: Shared Docker Containers"},{"location":"local_docker_development/#part-ii-drupal-docker-containers","text":"The Docker Containers which will run Drupal. These are made to be copied into a Drupal root directory and to be started from there with docker-compose . Read how they are used","title":"Part II: Drupal Docker Containers"},{"location":"local_docker_development/#what-it-includes","text":"An example local Docker Drupal Development environment, such as https://www.github.com/lagoon-examples/drupal9-solr, equips you with all the tools you need to develop your Drupal site locally: Webserver: Nginx Frontend Caching: Varnish FastCGI Process Manager: PHP-FPM Server-side Scripting Language: PHP Database: MariaDB Search: Apache Solr Dependency Manager for PHP: Composer NodeJS / NPM For more information about software components used in the Lagoon Stack head over to their docs .","title":"What it includes"},{"location":"local_docker_development/#how-this-works","text":"Docker is super awesome and the perfect tool for local development. There are some hurdles though (no worries, we have a solution for all of them):","title":"How this works"},{"location":"local_docker_development/#exposed-ports","text":"If multiple Docker containers are exposing the same port it assigned a random port to the exposed port. In our case, this would mean, that each Drupal Container which would like to listen on Port 80 would get a random port like 34564 assigned. As they are random assigned it would be a lot of hassle of figuring out which port that the Drupal is found, additionally, Drupal doesn't like to run on another Port then 80 or 443 so much.","title":"Exposed ports"},{"location":"local_docker_development/#ssh-keys","text":"It is possible to add mount ssh private keys into Docker containers, but this is again cumbersome, especially when you have a passphrase protected key (as you should!). You would need to enter the passphrase for each container that you start. Not a lot of fun.","title":"SSH Keys"},{"location":"local_docker_development/#the-solution","text":"pygmy allows you to: Access all sites via the Port 80 or 443 with just different URLs like site1.docker.amazee.io and site2.docker.amazee.io Add your SSH Key once to the system and can forget about it, no need to add it to each container The environment starts 4 containers: andyshinn/dnsmasq Docker container which will listen on port 53 and resolve all DNS requests from *.docker.amazee.io to 127.0.0.1 (so basically a better way then filling your /etc/hosts file by hand) amazeeio/haproxy Docker container which will listen on port 80 and 443. It additionally listens to the Docker socket, realize when you start a new Drupal Container and adapt fully automatically it's haproxy configuration (thanks to the awesome tool docker-gen ). It forwards HTTP and HTTPs requests to the correct Drupal Container. With that we can access all Drupal Containers via a single Port. amazeeio/ssh-agent Docker container which will keeps an ssh-agent at hand for the other Drupal Containers. With that the Drupal Containers do not need to handle ssh-agenting themselves mailhog/mailhog Docker container which will keeps emails from being sent but allows for you to read and debug message contents.","title":"The Solution"},{"location":"local_docker_development/#schema-for-linux-native-docker","text":"+--------------------------------------------------------------------+ |Docker | | | | HAProxy knows which | | *.docker.amazee.io is | | handled by which container +---------------------+ | | | | | | +-------+ Drupal Container 1 <--+ | | | | | | | +--------------------+ | +------------------+ | +---------------------+ | | | | | | | | | | | | | | HAProxy +-----+ | | | +----------------------------> | | +---------------------+ | | | | | | Published Ports | | | | | | | | any HTTP/HTTPS | | 80/443 | +-------+ Drupal Container 2 <--+ | | | request | +------------------+ | | | | | Browser | | +---------------------+ | | | | | | | | | | +------------------+ | | | +----------------------------> | | | | <----------------------------+ dns masq | | | | | | | | | | | | Resolves | | | | | | | *.docker.amaze.io | | | | | +--------------------+ to IP of Haproxy | +------------------+ | | | | | | | | | | | | | | | | | +--------------------+ | +------------------+ | | | | | | | | | | pygmy +----------------------------> ssh agent +--------------------------------------+ | | | | | | | +--------------------+ injects ssh-key | +------------------+ Exposes ssh-agent via | into agent | /tmp/amazeeio_ssh-agent/socket | | | +--------------------------------------------------------------------+","title":"Schema for Linux (native Docker)"},{"location":"map_addtitional_ports/","text":"Warning This section is outdated and needs an update Map additional ports # As it explained in the Connect to MySQL section, Docker maps MySQL's 3306 port to a random port on docker.amazee.io. This happens because port 3306 is set in the docker-compose.yml file: ports: - \"3306\" If you need to map other ports, simply add them to the ports section and restart the container. Example for Solr # If you use one of Lagoon's Drupal containers with Solr included, your Solr URL most likely looks like this: http://127.0.0.1:8149/solr/drupal/ In this case, to play with Solr queries: - add \"8149\" to the ports section of docker-compose.yml file - restart the container with docker-compose stop && docker-compose up -d - get the port number with docker-compose port drupal 8149 - start playing at http://docker.amazee.io:<PORT_NUMBER>/solr/drupal/admin/","title":"Mapping additional ports"},{"location":"map_addtitional_ports/#map-additional-ports","text":"As it explained in the Connect to MySQL section, Docker maps MySQL's 3306 port to a random port on docker.amazee.io. This happens because port 3306 is set in the docker-compose.yml file: ports: - \"3306\" If you need to map other ports, simply add them to the ports section and restart the container.","title":"Map additional ports"},{"location":"map_addtitional_ports/#example-for-solr","text":"If you use one of Lagoon's Drupal containers with Solr included, your Solr URL most likely looks like this: http://127.0.0.1:8149/solr/drupal/ In this case, to play with Solr queries: - add \"8149\" to the ports section of docker-compose.yml file - restart the container with docker-compose stop && docker-compose up -d - get the port number with docker-compose port drupal 8149 - start playing at http://docker.amazee.io:<PORT_NUMBER>/solr/drupal/admin/","title":"Example for Solr"},{"location":"ssh_agent/","text":"SSH Agent # Per default your SSH Key at ~/.ssh/id_rsa is added to the Docker containers from pygmy How it works # pygmy starts amazeeio/ssh-agent container with a volume /tmp/amazeeio_ssh-agent pygmy adds a default SSH key from the host into this volume docker-compose.yml should have volume inclusion specified for CLI container: volumes_from: - container:amazeeio-ssh-agent When CLI container starts, the volume is mounted and an entrypoint script adds SHH key into agent. @see https://github.com/uselagoon/lagoon-images/blob/main/images/php-cli/entrypoints/10-ssh-agent.sh Running ssh-add -L within CLI container should show that the SSH key is correctly loaded. Troubleshooting # SSH Key issues # As everything on Lagoon works with key authentication sometimes you might run into issues where the drush aliases aren't displayed or you can't connect to the servers. Could not load API JWT Token, error was: 'lagoon@ssh.lagoon.amazeeio.cloud: Permission denied (publickey).' Or for legacy systems: drupal@example.amazee.io:~/public_html/docroot (staging)$ drush @master ssh Permission denied (publickey). Check if you see the SSH Key inside your container with ssh-add -L If you get Could not open a connection to your authentication agent. or The agent has no identities. head straight to step 3. Check if you see your SSH Key in pygmy status If you don't see the key in pymgy status run pygmy addkey . You should see Successfully added ssh key if the key addition was successful. After that you need to recreate the containers docker-compose up -d --force When the containers are recreated you should be able to see your ssh key with ssh-add -L If you still get the Permission denied (publickey) error get in touch with our engineers to check if the key is configured correctly on the hosting side.","title":"SSH Agent"},{"location":"ssh_agent/#ssh-agent","text":"Per default your SSH Key at ~/.ssh/id_rsa is added to the Docker containers from pygmy","title":"SSH Agent"},{"location":"ssh_agent/#how-it-works","text":"pygmy starts amazeeio/ssh-agent container with a volume /tmp/amazeeio_ssh-agent pygmy adds a default SSH key from the host into this volume docker-compose.yml should have volume inclusion specified for CLI container: volumes_from: - container:amazeeio-ssh-agent When CLI container starts, the volume is mounted and an entrypoint script adds SHH key into agent. @see https://github.com/uselagoon/lagoon-images/blob/main/images/php-cli/entrypoints/10-ssh-agent.sh Running ssh-add -L within CLI container should show that the SSH key is correctly loaded.","title":"How it works"},{"location":"ssh_agent/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"ssh_agent/#ssh-key-issues","text":"As everything on Lagoon works with key authentication sometimes you might run into issues where the drush aliases aren't displayed or you can't connect to the servers. Could not load API JWT Token, error was: 'lagoon@ssh.lagoon.amazeeio.cloud: Permission denied (publickey).' Or for legacy systems: drupal@example.amazee.io:~/public_html/docroot (staging)$ drush @master ssh Permission denied (publickey). Check if you see the SSH Key inside your container with ssh-add -L If you get Could not open a connection to your authentication agent. or The agent has no identities. head straight to step 3. Check if you see your SSH Key in pygmy status If you don't see the key in pymgy status run pygmy addkey . You should see Successfully added ssh key if the key addition was successful. After that you need to recreate the containers docker-compose up -d --force When the containers are recreated you should be able to see your ssh key with ssh-add -L If you still get the Permission denied (publickey) error get in touch with our engineers to check if the key is configured correctly on the hosting side.","title":"SSH Key issues"},{"location":"troubleshooting/","text":"Troubleshooting local development environments # Generic Issues # For most problems with the Docker Development environment, it's the best to restart all shared and Drupal specific Docker containers. Restart shared Docker containers # This is done either in pygmy pygmy restart -d now you should also restart the Drupal specific Containers: Restart Drupal Containers # needs to be done separate for each Drupal container. Run this command where the docker-compose.yml is: docker-compose restart sometimes this is not enough, we can tell docker compose to recreate the containers: docker-compose up -d --force-recreate If this still is not enough, this is the \ud83d\udd28 method: docker-compose down -v docker-compose up {% hint style='danger' %} This will remove your whole local MySQL database and maybe existing other local created volumes (like the solr search index). Drupal Container logs # The above commands all assume that something is wrong with the containers, sometimes though the issue lies somewhere else. To find such issues, we need to analyze the docker logs, do that via: docker-compose logs Attaching to amazee_io.docker.amazee.io amazee_io.docker.amazee.io | *** Running /etc/my_init.d/00_regen_ssh_host_keys.sh... amazee_io.docker.amazee.io | *** Running /etc/my_init.d/20_virtual_host_replace.sh... amazee_io.docker.amazee.io | *** Running /etc/rc.local... amazee_io.docker.amazee.io | *** Booting runit daemon... amazee_io.docker.amazee.io | *** Runit started as PID 33 amazee_io.docker.amazee.io | tail: cannot open \u2018/var/log/nginx/10fe-drupal.error.log\u2019 for reading: No such file or directory amazee_io.docker.amazee.io | tail: cannot open \u2018/var/log/nginx/20be-drupal.error.log\u2019 for reading: No such file or directory amazee_io.docker.amazee.io | tail: cannot open \u2018/var/log/nginx/error.log\u2019 for reading: No such file or directory amazee_io.docker.amazee.io | tail: cannot open \u2018/var/log/nginx/ssl-10fe-drupal.error.log\u2019 for reading: No such file or directory amazee_io.docker.amazee.io | 160502 05:13:44 mysqld_safe Logging to syslog. amazee_io.docker.amazee.io | child (246) Started amazee_io.docker.amazee.io | Child (246) said Child starts Check the latest few lines of code and you probably see the issue. Shared container logs # To see the logs of the shared container started via pygmy , first display all docker containers: docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 9e27b9eadc67 amazeeio/drupal:php70-basic \"/sbin/my_init\" 5 minutes ago Up 5 minutes 80/tcp, 443/tcp, 0.0.0.0:32782->3306/tcp amazee_io.docker.amazee.io 5ce655cd369f andyshinn/dnsmasq:2.75 \"dnsmasq -k -A /docke\" 24 minutes ago Up 24 minutes 0.0.0.0:53->53/tcp, 0.0.0.0:53->53/udp amazeeio-dnsmasq 124b3919e89a amazeeio/ssh-agent \"/run.sh ssh-agent\" 24 minutes ago Up 24 minutes amazeeio-ssh-agent 93eb7a384640 amazeeio/haproxy \"/app/docker-entrypoi\" 24 minutes ago Up 24 minutes 0.0.0.0:80->80/tcp, 0.0.0.0:443->443/tcp amazeeio-haproxy You can see three containers that have names with starting amazeeio- these are the shared containers. You can view each container's logs via: docker logs -f [container name] Btw, you can also see the logs of the Drupal Containers, via that command. I get an error like Permission denied (publickey). and I only see an alias for @none in drush sa # First try restarting your container, it may have lost the volume mount to the ssh-agent docker-compose up --force -d If that does not resolve the issue, restart pygmy pygmy restart -d I get an error like Conflict. The name \"/amazee_io.docker.amazee.io\" is already in use by container # It happened to all of us, you remove a local docker-compose.yml file, recreate it and now during docker-compose up -d , docker yells at you and tells you this container exists already. The easiest way would be to just give your new container another name, but there are better ways: Remove a container # Find the name of the container you would like to completely remove via: docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 9e27b9eadc67 amazeeio/drupal:php70-basic \"/sbin/my_init\" 10 minutes ago Up 10 minutes 80/tcp, 443/tcp, 0.0.0.0:32782->3306/tcp amazee_io.docker.amazee.io Stop the container docker stop amazee_io.docker.amazee.io Remove the container with it's volumes: docker rm -v amazee_io.docker.amazee.io Remove all containers and all volumes # You shouldn't really need to do this, and if you think so, first try the above help. But sometimes the best way is to completely restart: docker rm -vf $(docker ps -q -a) This will stop and remove all containers and all attached volumes. {% hint style='danger' %} This will remove your whole local MySQL database and maybe existing other local created volumes (like the solr search index). If you get an error like cannot create temp file for here-document: No space left on device then you can free up space by removing old volumes and images that we don't need anymore: docker volume rm $(docker volume ls -q) If you also want to get rid of all the docker images you can run: docker rmi $(docker images -q) Now you have a completely empty Docker, now it's time to start again with pygmy . No space left on device # If you need to free up some disk space, you can do this: - start all containers that you need to preserve - run the following commands docker system prune docker image prune -a docker volume prune I get an error like port is already allocated. during start # If during the start of Docker containers you see an error like that: docker: Error response from daemon: driver failed programming external connectivity on endpoint amazeeio-haproxy (654d1f1c17b0f7304570a763e1017808b214b81648045a5c64ed6a395daeec92): Bind for 0.0.0.0:443 failed: port is already allocated. This means that another service (can be another Docker container, or in case of Linux based systems another service like an installed nginx) is already using this Port. You should stop this service or Docker container first. I get an error like Service \"drupal\" mounts volumes from \"amazeeio-ssh-agent\", which is not the name of a service or container. # This can happen when you start a Drupal Container via docker-compose up -d and the pygmy service has stopped docker-compose up -d ERROR: Service \"drupal\" mounts volumes from \"amazeeio-ssh-agent\", which is not the name of a service or container. The Drupal Containers are depending on the ssh-agent shared Docker container (this is in order to have shared ssh-keys) and somehow this container is missing. Try to restart pygmy , this will create the ssh-agent container with the name amazeeio-ssh-agent and then try again. Working Offline # Amazeeio uses a remote DNS server to resolve your *.docker.amazee.io addresses which means if you don't have an internet connection you are not going to be able to get to your site. However, you can use your hosts file in this scenario. This file is typically located at /etc/hosts on Linux and macOS and C:\\Windows\\System32\\Drivers\\etc\\host on Windows. You will need administrative privileges to edit this file. If you are unfamiliar with this process, follow this tutorial at How-To Geek . Host entry if using pygmy # 127 .0.0.1 awesomesauce.docker.amazee.io I can't connect to an app running in docker from another VM (commonly to test in IE) # If you are running the Windows VM in VirtualBox, you can configure it to use the host DNS resolver: VBoxManage modifyvm \"IE11 - Win10\" --natdnshostresolver1 on Replace \"IE11 - Win10\" with the name of your VM. This will allow the VM to resolve and connect directly to your http://*.docker.amazee.io services running in pygmy. For pygmy # An additional step is required if you use pygmy. Domains have to be added to Windows hosts file. They should point to the gateway IP address. To get the gateway IP, run ipconfig in Windows terminal, and search for Default Gateway in the output. Example hosts file contents: 10.0.2.2 my-local-website.com.docker.amazee.io pygmy # Most issues with pygmy can be resolved with: pygmy restart -d If that does not help, try and restart other services, in this order: Docker Reboot your computer I get an error like listen tcp 0.0.0.0:53: bind: address already in use during pygmy up # If during starting of pygmy you see an error like that: Error response from daemon: driver failed programming external connectivity on endpoint amazeeio-dnsmasq: Error starting userland proxy: listen tcp 0.0.0.0:53: bind: address already in use Error: failed to start containers: amazeeio-dnsmasq You are probably on Ubuntu and the by default started DNS server by Ubuntu conflicts with the one we provide with pygmy . The resolution depends on Ubuntu version. Ubuntu before 18.04 # You should disable it, see here: http://askubuntu.com/a/233223 (no worries, the default started DNS server is actually not used, so it's safe to disable it). Ubuntu 18.04 and later # You should disable it as described https://mmoapi.com/post/how-to-disable-dnsmasq-port-53-listening-on-ubuntu-18-04. Instead of reboot the system, remove /etc/resolv.conf file (still symlinking to a systemd-resolved file) and create an empty one. sudo rm /etc/resolv.conf sudo touch /etc/resolv.conf If you still run into the error run following command sudo netstat -tulpn to see the processlist look for the service running on port 53 (you should find that process in the Local Address column). Look for the Process ID (PID) With the Process ID you can now run following command: sudo kill [Process ID]","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting-local-development-environments","text":"","title":"Troubleshooting local development environments"},{"location":"troubleshooting/#generic-issues","text":"For most problems with the Docker Development environment, it's the best to restart all shared and Drupal specific Docker containers.","title":"Generic Issues"},{"location":"troubleshooting/#restart-shared-docker-containers","text":"This is done either in pygmy pygmy restart -d now you should also restart the Drupal specific Containers:","title":"Restart shared Docker containers"},{"location":"troubleshooting/#restart-drupal-containers","text":"needs to be done separate for each Drupal container. Run this command where the docker-compose.yml is: docker-compose restart sometimes this is not enough, we can tell docker compose to recreate the containers: docker-compose up -d --force-recreate If this still is not enough, this is the \ud83d\udd28 method: docker-compose down -v docker-compose up {% hint style='danger' %} This will remove your whole local MySQL database and maybe existing other local created volumes (like the solr search index).","title":"Restart Drupal Containers"},{"location":"troubleshooting/#drupal-container-logs","text":"The above commands all assume that something is wrong with the containers, sometimes though the issue lies somewhere else. To find such issues, we need to analyze the docker logs, do that via: docker-compose logs Attaching to amazee_io.docker.amazee.io amazee_io.docker.amazee.io | *** Running /etc/my_init.d/00_regen_ssh_host_keys.sh... amazee_io.docker.amazee.io | *** Running /etc/my_init.d/20_virtual_host_replace.sh... amazee_io.docker.amazee.io | *** Running /etc/rc.local... amazee_io.docker.amazee.io | *** Booting runit daemon... amazee_io.docker.amazee.io | *** Runit started as PID 33 amazee_io.docker.amazee.io | tail: cannot open \u2018/var/log/nginx/10fe-drupal.error.log\u2019 for reading: No such file or directory amazee_io.docker.amazee.io | tail: cannot open \u2018/var/log/nginx/20be-drupal.error.log\u2019 for reading: No such file or directory amazee_io.docker.amazee.io | tail: cannot open \u2018/var/log/nginx/error.log\u2019 for reading: No such file or directory amazee_io.docker.amazee.io | tail: cannot open \u2018/var/log/nginx/ssl-10fe-drupal.error.log\u2019 for reading: No such file or directory amazee_io.docker.amazee.io | 160502 05:13:44 mysqld_safe Logging to syslog. amazee_io.docker.amazee.io | child (246) Started amazee_io.docker.amazee.io | Child (246) said Child starts Check the latest few lines of code and you probably see the issue.","title":"Drupal Container logs"},{"location":"troubleshooting/#shared-container-logs","text":"To see the logs of the shared container started via pygmy , first display all docker containers: docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 9e27b9eadc67 amazeeio/drupal:php70-basic \"/sbin/my_init\" 5 minutes ago Up 5 minutes 80/tcp, 443/tcp, 0.0.0.0:32782->3306/tcp amazee_io.docker.amazee.io 5ce655cd369f andyshinn/dnsmasq:2.75 \"dnsmasq -k -A /docke\" 24 minutes ago Up 24 minutes 0.0.0.0:53->53/tcp, 0.0.0.0:53->53/udp amazeeio-dnsmasq 124b3919e89a amazeeio/ssh-agent \"/run.sh ssh-agent\" 24 minutes ago Up 24 minutes amazeeio-ssh-agent 93eb7a384640 amazeeio/haproxy \"/app/docker-entrypoi\" 24 minutes ago Up 24 minutes 0.0.0.0:80->80/tcp, 0.0.0.0:443->443/tcp amazeeio-haproxy You can see three containers that have names with starting amazeeio- these are the shared containers. You can view each container's logs via: docker logs -f [container name] Btw, you can also see the logs of the Drupal Containers, via that command.","title":"Shared container logs"},{"location":"troubleshooting/#i-get-an-error-like-permission-denied-publickey-and-i-only-see-an-alias-for-none-in-drush-sa","text":"First try restarting your container, it may have lost the volume mount to the ssh-agent docker-compose up --force -d If that does not resolve the issue, restart pygmy pygmy restart -d","title":"I get an error like Permission denied (publickey). and I only see an alias for @none in drush sa"},{"location":"troubleshooting/#i-get-an-error-like-conflict-the-name-amazee_iodockeramazeeio-is-already-in-use-by-container","text":"It happened to all of us, you remove a local docker-compose.yml file, recreate it and now during docker-compose up -d , docker yells at you and tells you this container exists already. The easiest way would be to just give your new container another name, but there are better ways:","title":"I get an error like Conflict. The name \"/amazee_io.docker.amazee.io\" is already in use by container"},{"location":"troubleshooting/#remove-a-container","text":"Find the name of the container you would like to completely remove via: docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 9e27b9eadc67 amazeeio/drupal:php70-basic \"/sbin/my_init\" 10 minutes ago Up 10 minutes 80/tcp, 443/tcp, 0.0.0.0:32782->3306/tcp amazee_io.docker.amazee.io Stop the container docker stop amazee_io.docker.amazee.io Remove the container with it's volumes: docker rm -v amazee_io.docker.amazee.io","title":"Remove a container"},{"location":"troubleshooting/#remove-all-containers-and-all-volumes","text":"You shouldn't really need to do this, and if you think so, first try the above help. But sometimes the best way is to completely restart: docker rm -vf $(docker ps -q -a) This will stop and remove all containers and all attached volumes. {% hint style='danger' %} This will remove your whole local MySQL database and maybe existing other local created volumes (like the solr search index). If you get an error like cannot create temp file for here-document: No space left on device then you can free up space by removing old volumes and images that we don't need anymore: docker volume rm $(docker volume ls -q) If you also want to get rid of all the docker images you can run: docker rmi $(docker images -q) Now you have a completely empty Docker, now it's time to start again with pygmy .","title":"Remove all containers and all volumes"},{"location":"troubleshooting/#no-space-left-on-device","text":"If you need to free up some disk space, you can do this: - start all containers that you need to preserve - run the following commands docker system prune docker image prune -a docker volume prune","title":"No space left on device"},{"location":"troubleshooting/#i-get-an-error-like-port-is-already-allocated-during-start","text":"If during the start of Docker containers you see an error like that: docker: Error response from daemon: driver failed programming external connectivity on endpoint amazeeio-haproxy (654d1f1c17b0f7304570a763e1017808b214b81648045a5c64ed6a395daeec92): Bind for 0.0.0.0:443 failed: port is already allocated. This means that another service (can be another Docker container, or in case of Linux based systems another service like an installed nginx) is already using this Port. You should stop this service or Docker container first.","title":"I get an error like port is already allocated. during start"},{"location":"troubleshooting/#i-get-an-error-like-service-drupal-mounts-volumes-from-amazeeio-ssh-agent-which-is-not-the-name-of-a-service-or-container","text":"This can happen when you start a Drupal Container via docker-compose up -d and the pygmy service has stopped docker-compose up -d ERROR: Service \"drupal\" mounts volumes from \"amazeeio-ssh-agent\", which is not the name of a service or container. The Drupal Containers are depending on the ssh-agent shared Docker container (this is in order to have shared ssh-keys) and somehow this container is missing. Try to restart pygmy , this will create the ssh-agent container with the name amazeeio-ssh-agent and then try again.","title":"I get an error like Service \"drupal\" mounts volumes from \"amazeeio-ssh-agent\", which is not the name of a service or container."},{"location":"troubleshooting/#working-offline","text":"Amazeeio uses a remote DNS server to resolve your *.docker.amazee.io addresses which means if you don't have an internet connection you are not going to be able to get to your site. However, you can use your hosts file in this scenario. This file is typically located at /etc/hosts on Linux and macOS and C:\\Windows\\System32\\Drivers\\etc\\host on Windows. You will need administrative privileges to edit this file. If you are unfamiliar with this process, follow this tutorial at How-To Geek .","title":"Working Offline"},{"location":"troubleshooting/#host-entry-if-using-pygmy","text":"127 .0.0.1 awesomesauce.docker.amazee.io","title":"Host entry if using pygmy"},{"location":"troubleshooting/#i-cant-connect-to-an-app-running-in-docker-from-another-vm-commonly-to-test-in-ie","text":"If you are running the Windows VM in VirtualBox, you can configure it to use the host DNS resolver: VBoxManage modifyvm \"IE11 - Win10\" --natdnshostresolver1 on Replace \"IE11 - Win10\" with the name of your VM. This will allow the VM to resolve and connect directly to your http://*.docker.amazee.io services running in pygmy.","title":"I can't connect to an app running in docker from another VM (commonly to test in IE)"},{"location":"troubleshooting/#for-pygmy","text":"An additional step is required if you use pygmy. Domains have to be added to Windows hosts file. They should point to the gateway IP address. To get the gateway IP, run ipconfig in Windows terminal, and search for Default Gateway in the output. Example hosts file contents: 10.0.2.2 my-local-website.com.docker.amazee.io","title":"For pygmy"},{"location":"troubleshooting/#pygmy","text":"Most issues with pygmy can be resolved with: pygmy restart -d If that does not help, try and restart other services, in this order: Docker Reboot your computer","title":"pygmy"},{"location":"troubleshooting/#i-get-an-error-like-listen-tcp-000053-bind-address-already-in-use-during-pygmy-up","text":"If during starting of pygmy you see an error like that: Error response from daemon: driver failed programming external connectivity on endpoint amazeeio-dnsmasq: Error starting userland proxy: listen tcp 0.0.0.0:53: bind: address already in use Error: failed to start containers: amazeeio-dnsmasq You are probably on Ubuntu and the by default started DNS server by Ubuntu conflicts with the one we provide with pygmy . The resolution depends on Ubuntu version.","title":"I get an error like listen tcp 0.0.0.0:53: bind: address already in use during pygmy up"},{"location":"troubleshooting/#ubuntu-before-1804","text":"You should disable it, see here: http://askubuntu.com/a/233223 (no worries, the default started DNS server is actually not used, so it's safe to disable it).","title":"Ubuntu before 18.04"},{"location":"troubleshooting/#ubuntu-1804-and-later","text":"You should disable it as described https://mmoapi.com/post/how-to-disable-dnsmasq-port-53-listening-on-ubuntu-18-04. Instead of reboot the system, remove /etc/resolv.conf file (still symlinking to a systemd-resolved file) and create an empty one. sudo rm /etc/resolv.conf sudo touch /etc/resolv.conf If you still run into the error run following command sudo netstat -tulpn to see the processlist look for the service running on port 53 (you should find that process in the Local Address column). Look for the Process ID (PID) With the Process ID you can now run following command: sudo kill [Process ID]","title":"Ubuntu 18.04 and later"},{"location":"update/","text":"Update pygmy # As pygmy is an active project, you should also take care of updating pygmy. Use the same instructions to update Pygmy as to install it. I see errors or unexpected behaviour after the upgrade # If you see anything unexpected after upgrading, the recommended advice is to clean up the environment and remove the docker network. Any applications which use the network amazeeio-network such as a docker-compose Drupal project - should not be running. You can alternatively run docker network rm amazeeio-network --force . $ pygmy clean $ docker network rm amazeeio-network Update Docker Containers with pygmy # pygmy can update shared docker containers for you: pygmy update && pygmy restart","title":"Update"},{"location":"update/#update-pygmy","text":"As pygmy is an active project, you should also take care of updating pygmy. Use the same instructions to update Pygmy as to install it.","title":"Update pygmy"},{"location":"update/#i-see-errors-or-unexpected-behaviour-after-the-upgrade","text":"If you see anything unexpected after upgrading, the recommended advice is to clean up the environment and remove the docker network. Any applications which use the network amazeeio-network such as a docker-compose Drupal project - should not be running. You can alternatively run docker network rm amazeeio-network --force . $ pygmy clean $ docker network rm amazeeio-network","title":"I see errors or unexpected behaviour after the upgrade"},{"location":"update/#update-docker-containers-with-pygmy","text":"pygmy can update shared docker containers for you: pygmy update && pygmy restart","title":"Update Docker Containers with pygmy"},{"location":"usage/","text":"Start # To start pygmy run following command pygmy up pygmy will now start all the required Docker containers and add the ssh key. If you are on Ubuntu you might need to run pygmy with pygmy up --no-resolver All done? Head over to Drupal Docker Containers to learn how to work with docker containers. Command line usage # Amazeeio's local development tool, Runs DNSMasq, HAProxy, MailHog and an SSH Agent in local containers for local development. Usage: pygmy [command] Available Commands: addkey Add/re-add an SSH key to the agent clean Stop and remove all pygmy services regardless of state down Stop and remove all pygmy services export Export validated configuration to a given path help Help about any command restart Restart all pygmy containers. status Report status of the pygmy services up Bring up pygmy services (dnsmasq, haproxy, mailhog, resolv, ssh-agent) update Pulls Docker Images and recreates the Containers version # Check current installed version of pygmy Flags: --config string config file (default is $HOME/.pygmy.yml) -h, --help help for pygmy -t, --toggle Help message for toggle Use \"pygmy [command] --help\" for more information about a command. Adding ssh keys # Call the addkey command with the absolute path to the key you would like to add. In case this they is passphrase protected, it will ask for your passphrase. pygmy addkey /Users/amazeeio/.ssh/my_other_key Enter passphrase for /Users/amazeeio/.ssh/my_other_key: Identity added: /Users/amazeeio/.ssh/my_other_key (/Users/amazeeio/.ssh/my_other_key) Checking the status # Run pygmy status and pygmy will tell you how it feels right now and which ssh-keys it currently has in it's stomach: pygmy status [*] amazeeio-ssh-agent: Running as container amazeeio-ssh-agent [*] mailhog.docker.amazee.io: Running as container mailhog.docker.amazee.io [*] amazeeio-haproxy: Running as container amazeeio-haproxy [*] amazeeio-dnsmasq: Running as container amazeeio-dnsmasq [*] amazeeio-haproxy is connected to network amazeeio-network [*] Resolv MacOS Resolver is properly connected \ufffdssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDNxWpKZcU/D+t7ToRGPNEXbvojrFtxKH99ZuaOJ7cs9KurVJyiEHyBEUZAPt0j9SO5yzdVEM//rVoZIwZeypW9C7CYgTpRoA/k1BnE1xvtoQT+528GmjQG542NBFo2KdO+LWqx19kClvoN7haGDtYKbS6MWUYEwD0ey69cquFDKC+A5NKx3z065gn9UZqLIeXjHCJ+v5PCSWXL3CFn57UlN824j1OFAECrjfNNfFEVmDJqa2Da6o9DhN+W1wyZJCklRPCiRlK5m3p9x1ClPKALUGQ0hvpjz36QSsXqS88MJPHsZvsv2PuW6xXNW8PSBCHcK6no5lYV/4hk8jcDQd2P6dpwvDiti+bTcfDH3jrVNqFati7ku37xIc3jWGn7CkCpMy008ai4kFMq2W2w6gOy0HncQ7z8AE8BdndxyEFYCLJviWOjW1SjSesPJpc9dxgmSmp/2qa6u0UZzFFHxJklIHepJAvcoHghs5Te2oMHwriRdpKqXiW+eJyudWCOzEeJljr73/Caft+CgZ7+kmmiy0hlqVAD6xkyBsuEF8+MdONfBHarpY8qZdLehavGd0DJW36nDnPvefDxoidJ0qYtjF8ElpNkeguAnsUFEwHkoc3Ur/NDcrkdGTKS8wb5AtkdwbDOCQTR00ABfAcYUFwOAvXodoQLrvm2ibp5l7/Y/Q== user@localhost - http://mailhog.docker.amazee.io (mailhog.docker.amazee.io) - http://docker.amazee.io/stats (amazeeio-haproxy) pygmy down vs pygmy clean # pygmy behaves like Docker, it's a whale in the end! During regular development pygmy stop is perfectly fine, it will remove the Docker containers still alive. If you like to cleanup though, use pygmy clean to kill and remove all of the Docker containers, even if they're not alive. Access HAProxy statistic page and logs # HAProxy service has statistics web page already enabled. To access the page, just point the browser to http://docker.amazee.io/stats . To watch at haproxy container logs, use the docker logs amazeeio-haproxy command with standard docker logs options like -f to follow.","title":"Usage"},{"location":"usage/#start","text":"To start pygmy run following command pygmy up pygmy will now start all the required Docker containers and add the ssh key. If you are on Ubuntu you might need to run pygmy with pygmy up --no-resolver All done? Head over to Drupal Docker Containers to learn how to work with docker containers.","title":"Start"},{"location":"usage/#command-line-usage","text":"Amazeeio's local development tool, Runs DNSMasq, HAProxy, MailHog and an SSH Agent in local containers for local development. Usage: pygmy [command] Available Commands: addkey Add/re-add an SSH key to the agent clean Stop and remove all pygmy services regardless of state down Stop and remove all pygmy services export Export validated configuration to a given path help Help about any command restart Restart all pygmy containers. status Report status of the pygmy services up Bring up pygmy services (dnsmasq, haproxy, mailhog, resolv, ssh-agent) update Pulls Docker Images and recreates the Containers version # Check current installed version of pygmy Flags: --config string config file (default is $HOME/.pygmy.yml) -h, --help help for pygmy -t, --toggle Help message for toggle Use \"pygmy [command] --help\" for more information about a command.","title":"Command line usage"},{"location":"usage/#adding-ssh-keys","text":"Call the addkey command with the absolute path to the key you would like to add. In case this they is passphrase protected, it will ask for your passphrase. pygmy addkey /Users/amazeeio/.ssh/my_other_key Enter passphrase for /Users/amazeeio/.ssh/my_other_key: Identity added: /Users/amazeeio/.ssh/my_other_key (/Users/amazeeio/.ssh/my_other_key)","title":"Adding ssh keys"},{"location":"usage/#checking-the-status","text":"Run pygmy status and pygmy will tell you how it feels right now and which ssh-keys it currently has in it's stomach: pygmy status [*] amazeeio-ssh-agent: Running as container amazeeio-ssh-agent [*] mailhog.docker.amazee.io: Running as container mailhog.docker.amazee.io [*] amazeeio-haproxy: Running as container amazeeio-haproxy [*] amazeeio-dnsmasq: Running as container amazeeio-dnsmasq [*] amazeeio-haproxy is connected to network amazeeio-network [*] Resolv MacOS Resolver is properly connected \ufffdssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDNxWpKZcU/D+t7ToRGPNEXbvojrFtxKH99ZuaOJ7cs9KurVJyiEHyBEUZAPt0j9SO5yzdVEM//rVoZIwZeypW9C7CYgTpRoA/k1BnE1xvtoQT+528GmjQG542NBFo2KdO+LWqx19kClvoN7haGDtYKbS6MWUYEwD0ey69cquFDKC+A5NKx3z065gn9UZqLIeXjHCJ+v5PCSWXL3CFn57UlN824j1OFAECrjfNNfFEVmDJqa2Da6o9DhN+W1wyZJCklRPCiRlK5m3p9x1ClPKALUGQ0hvpjz36QSsXqS88MJPHsZvsv2PuW6xXNW8PSBCHcK6no5lYV/4hk8jcDQd2P6dpwvDiti+bTcfDH3jrVNqFati7ku37xIc3jWGn7CkCpMy008ai4kFMq2W2w6gOy0HncQ7z8AE8BdndxyEFYCLJviWOjW1SjSesPJpc9dxgmSmp/2qa6u0UZzFFHxJklIHepJAvcoHghs5Te2oMHwriRdpKqXiW+eJyudWCOzEeJljr73/Caft+CgZ7+kmmiy0hlqVAD6xkyBsuEF8+MdONfBHarpY8qZdLehavGd0DJW36nDnPvefDxoidJ0qYtjF8ElpNkeguAnsUFEwHkoc3Ur/NDcrkdGTKS8wb5AtkdwbDOCQTR00ABfAcYUFwOAvXodoQLrvm2ibp5l7/Y/Q== user@localhost - http://mailhog.docker.amazee.io (mailhog.docker.amazee.io) - http://docker.amazee.io/stats (amazeeio-haproxy)","title":"Checking the status"},{"location":"usage/#pygmy-down-vs-pygmy-clean","text":"pygmy behaves like Docker, it's a whale in the end! During regular development pygmy stop is perfectly fine, it will remove the Docker containers still alive. If you like to cleanup though, use pygmy clean to kill and remove all of the Docker containers, even if they're not alive.","title":"pygmy down vs pygmy clean"},{"location":"usage/#access-haproxy-statistic-page-and-logs","text":"HAProxy service has statistics web page already enabled. To access the page, just point the browser to http://docker.amazee.io/stats . To watch at haproxy container logs, use the docker logs amazeeio-haproxy command with standard docker logs options like -f to follow.","title":"Access HAProxy statistic page and logs"},{"location":"customisation/introduction/","text":"Introduction # The following are examples of how somebody can utilise pygmy to customise their environment using a ~/.pygmy.yml file. This file will have a schema which can be imported and the services match the Docker API. Standard schema for ~/.pygmy.yml # Defaults is a boolean which indicates all default settings should be inherited. defaults : true # Resolvers is the Resolv configuration, you can disable this by setting it to []. resolvers : - Data : \"Contents of the resolvr file/section\" File : \"filename.conf\" Folder : \"/folderpath\" Name : \"Human-readable name\" # Services is a hashmap of services : # The hashmap entry denotes the service name - such as \"amazeeio-dnsmasq\". mycontainer : # Config is derrived from the Docker API, intended for container configuration. # See https://godoc.org/github.com/docker/docker/api/types/container#Config for the full spec. Config : # This field is MANDATORY as the value will by default be empty. Image : imagename # Labels is a key/value pair of labels which will evaluate to string # equivelants. For example, Booleans can evaluate to 0/1 or true/false # string values depending on the Docker runtime you're using. Labels : # To enable Pygmy to the configuration, you will need this label. # This field is MANDATORY as the value will by default be false. pygmy.enable : true # You need to give this container a name # This field is MANDATORY as the value will by default be empty. pygmy.name : mycontainer # If you are customising an existing service, you can optionally # inherit the defaults if the global defaults are disabled. # Setting this value on a non-standard service will do nothing. pygmy.defaults : true # To display the output when the container starts: pygmy.output : true # To hide the container from the status messages: pygmy.discrete : true # To test an endpoint: pygmy.url : http://mycontainer.docker.amazee.io # To identify the purpose of a container - this is rather specialised so please ignore. pygmy.purpose : sshagent # To set a weight between 10 and 99 to control the order containers are started: pygmy.weight : 50 # HostConfig is derived from the Docker API, intended for host configuration. # See https://godoc.org/github.com/docker/docker/api/types/container#HostConfig for the full spec. HostConfig : [] # NetworkConfig is derived from the Docker API, intended for network configuration. # See https://godoc.org/github.com/docker/docker/api/types/network#NetworkingConfig for the full spec. NetworkConfig : # Hashmap value ideally should be the network name - but could be anything. # Results may vary, so try what works. amazeeio-network : # Every network needs a name. Name : amazeeio-network # An array of Containers. Containers : # Container name will tell Pygmy to integrate the container of the specified name should be connected to the docker network. Name : amazeeio-haproxy Labels : # Mandatory for network creation/usage via Pygmy. pygmy.network : true # networks is a hashmap of the API for a NetworkResource. # See https://godoc.org/github.com/docker/docker/api/types#NetworkResource for the full spec. networks : [] # volumes is a hashmap of the API for Volumes # See https://godoc.org/github.com/docker/docker/api/types#Volume for the full spec. volumes : [] # keys is all of the SSH key paths which you're utilising. keys : - /home/user1/.ssh/id_rsa - /home/user2/.ssh/id_rsa Applied examples # A suite of examples with a specific purpose are on the way.","title":"Introduction"},{"location":"customisation/introduction/#introduction","text":"The following are examples of how somebody can utilise pygmy to customise their environment using a ~/.pygmy.yml file. This file will have a schema which can be imported and the services match the Docker API. Standard schema for ~/.pygmy.yml # Defaults is a boolean which indicates all default settings should be inherited. defaults : true # Resolvers is the Resolv configuration, you can disable this by setting it to []. resolvers : - Data : \"Contents of the resolvr file/section\" File : \"filename.conf\" Folder : \"/folderpath\" Name : \"Human-readable name\" # Services is a hashmap of services : # The hashmap entry denotes the service name - such as \"amazeeio-dnsmasq\". mycontainer : # Config is derrived from the Docker API, intended for container configuration. # See https://godoc.org/github.com/docker/docker/api/types/container#Config for the full spec. Config : # This field is MANDATORY as the value will by default be empty. Image : imagename # Labels is a key/value pair of labels which will evaluate to string # equivelants. For example, Booleans can evaluate to 0/1 or true/false # string values depending on the Docker runtime you're using. Labels : # To enable Pygmy to the configuration, you will need this label. # This field is MANDATORY as the value will by default be false. pygmy.enable : true # You need to give this container a name # This field is MANDATORY as the value will by default be empty. pygmy.name : mycontainer # If you are customising an existing service, you can optionally # inherit the defaults if the global defaults are disabled. # Setting this value on a non-standard service will do nothing. pygmy.defaults : true # To display the output when the container starts: pygmy.output : true # To hide the container from the status messages: pygmy.discrete : true # To test an endpoint: pygmy.url : http://mycontainer.docker.amazee.io # To identify the purpose of a container - this is rather specialised so please ignore. pygmy.purpose : sshagent # To set a weight between 10 and 99 to control the order containers are started: pygmy.weight : 50 # HostConfig is derived from the Docker API, intended for host configuration. # See https://godoc.org/github.com/docker/docker/api/types/container#HostConfig for the full spec. HostConfig : [] # NetworkConfig is derived from the Docker API, intended for network configuration. # See https://godoc.org/github.com/docker/docker/api/types/network#NetworkingConfig for the full spec. NetworkConfig : # Hashmap value ideally should be the network name - but could be anything. # Results may vary, so try what works. amazeeio-network : # Every network needs a name. Name : amazeeio-network # An array of Containers. Containers : # Container name will tell Pygmy to integrate the container of the specified name should be connected to the docker network. Name : amazeeio-haproxy Labels : # Mandatory for network creation/usage via Pygmy. pygmy.network : true # networks is a hashmap of the API for a NetworkResource. # See https://godoc.org/github.com/docker/docker/api/types#NetworkResource for the full spec. networks : [] # volumes is a hashmap of the API for Volumes # See https://godoc.org/github.com/docker/docker/api/types#Volume for the full spec. volumes : [] # keys is all of the SSH key paths which you're utilising. keys : - /home/user1/.ssh/id_rsa - /home/user2/.ssh/id_rsa","title":"Introduction"},{"location":"customisation/introduction/#applied-examples","text":"A suite of examples with a specific purpose are on the way.","title":"Applied examples"}]}